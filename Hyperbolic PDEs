Consider the hyperbolic partial differential equation  with initial and boundary conditions:
   ,         for     
   ,   for 
Complete the code that finds each  that approximates the solution  using the finite difference method and spacing of  for  and  for .



%Define h, k, and n (which is equivalent to m in this problem since (1-0)/0.1=(0.5-0)/0.05). 
h=0.1
k=0.05
n=(1-0)/0.1

%Define lambda (Note: the coefficient (i.e. 4) in the PDE is c^2).
lambda = 2*k/h
%Define all x_i and t_j as arrays (call them arrays X and T so Matlab doesn't confuse them with variables x and t below)
%Recall, in general, Z=a+b*(c:d) defines Z as array [a+bc ...  a+bd]
X=h*(0:n)
T=k*(0:n)

sympref('FloatingPointOutput',true); %Converts to decimals
syms x t; %Declares x and t as variables
%Define the initial condition as a function handle f(x)
f=@(x)sin(pi*x)+sin(2*pi*x)
%Define U(1:n+1,1) (for the moment, which we'll assume is equivalent to u_i0 for i=0,...,n). 
U(1:n+1,1)=f(X(1:n+1))
%Define U(2:n,2) (for the moment, which we'll assume is equivalent to u_i1 for i=1,...,n-1).
U(2:n,2)=(1-lambda^2)*f(X(2:n))+lambda^2/2*f(X(3:n+1))+lambda^2/2*f(X(1:n-1))
%Define U(2:n,j+1) (for the moment, we'll assume is equivalent to U_ij for i=1,...,n-1 and j=2,3,...,n).
for j=2:n
U(2:n,j+1)=2*(1-lambda^2)*U(2:n,j)+lambda^2*(U(3:n+1,j)+U(1:n-1,j))-U(2:n,j-1)
end


%For output/marking purposes
U1=U(1:n+1,1)
U2=U(2:n,2)
Matrix_U=flip(transpose(U)) %re-writes U so that entry 1,1 represents approximation of u(x_1,y_n) (i.e. at location (x_0,y_n) on coordinate axes)
